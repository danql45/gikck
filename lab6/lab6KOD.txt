using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Drawing.Imaging;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace lab6
{
    public partial class Form1 : Form
    {
        private int[] red = null;
        private int[] green = null;
        private int[] blue = null;

        public Form1()
        {
            InitializeComponent();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            if (openFileDialog1.ShowDialog() == DialogResult.OK)
            {
                pictureBox1.Load(openFileDialog1.FileName);
                int szer = pictureBox1.Image.Width;
                int wys = pictureBox1.Image.Height;

                //oblicz histogram
                red = new int[256];
                green = new int[256];
                blue = new int[256];
                for (int i = 0; i < szer; i++)
                {
                    for(int j = 0; j < wys; j++)
                    {
                        Color pixel = ((Bitmap)pictureBox1.Image).GetPixel(i, j);
                        red[pixel.R]++;
                        green[pixel.G]++;
                        blue[pixel.B]++;
                    }
                }

                //wyswietlanie histogramu
                chart1.Series["red"].Points.Clear();
                chart1.Series["green"].Points.Clear();
                chart1.Series["blue"].Points.Clear();
                for(int k = 0; k < 256; k++)
                {
                    chart1.Series["red"].Points.AddXY(k, red[k]);
                    chart1.Series["green"].Points.AddXY(k, green[k]);
                    chart1.Series["blue"].Points.AddXY(k, blue[k]);
                }
                chart1.Invalidate();
            }
        }

        //tablica LUT do wyrownywania histogramu
        private int[] calcLUTw(int[] values, int size)
        {
            //poszukaj wartosci minimalnej - czyli pierwszej niezerowej wartosci dystrybuanty
            double minValue = 0;
            for(int i = 0; i < 256; i++)
            {
                if(values[i] != 0)
                {
                    minValue = values[i];
                    break;
                }
            }

            //przygoduj tablice zgodnie ze wzorem
            int[] result = new int[256];
            double sum = 0;
            for(int j = 0; j < 256; j++)
            {
                sum += values[j];
                result[j] = (int)(((sum - minValue) / (size - minValue)) * 255.0);
            }
            return result;
        }

        private void button2_Click(object sender, EventArgs e)
        {

            //tablice LUT dla skladowych
            int szer = pictureBox1.Image.Width;
            int wys = pictureBox1.Image.Height;
            int[] LUTred = calcLUTw(red, szer * wys);
            int[] LUTgreen = calcLUTw(green, szer * wys);
            int[] LUTblue = calcLUTw(blue, szer * wys);

            //przetworz obraz i oblicz nowy histogram
            red = new int[256];
            green = new int[256];
            blue = new int[256];

            Bitmap b1 = (Bitmap)pictureBox1.Image;
            Bitmap b2 = new Bitmap(b1.Width, b1.Height, PixelFormat.Format24bppRgb);


            for (int x = 0; x < szer; x++)
            {
                for(int y = 0; y < wys; y++)
                {
                    Color pixel = b1.GetPixel(x, y);
                    Color newPixel = Color.FromArgb(LUTred[pixel.R], LUTgreen[pixel.G], LUTblue[pixel.B]);
                    b2.SetPixel(x, y, newPixel);
                    red[newPixel.R]++;
                    green[newPixel.G]++;
                    blue[newPixel.B]++;
                }
            }
            pictureBox1.Image = b2;
            pictureBox1.Refresh();

            //wyswietlanie nowego histogramu
            chart1.Series["red"].Points.Clear();
            chart1.Series["green"].Points.Clear();
            chart1.Series["blue"].Points.Clear();
            for (int k = 0; k < 256; k++)
            {
                chart1.Series["red"].Points.AddXY(k, red[k]);
                chart1.Series["green"].Points.AddXY(k, green[k]);
                chart1.Series["blue"].Points.AddXY(k, blue[k]);
            }
            chart1.Invalidate();
        }



        //tablica LUT do skalowania (rozciagania) histogramu
        private int[] calcLUTs(int[] values)
        {
            //poszukaj wartosci minimalnej
            double minValue = 0;
            for (int i = 0; i < 256; i++)
            {
                if (values[i] != 0)
                {
                    minValue = i;
                    break;
                }
            }

            //poszukaj wartosci minimalnej
            double maxValue = 255;
            for (int i = 255; i >= 0; i--)
            {
                if (values[i] != 0)
                {
                    maxValue = i;
                    break;
                }
            }

            //przygoduj tablice zgodnie ze wzorem
            int[] result = new int[256];
            double a = 255.0 / (maxValue - minValue);
            for (int j = 0; j < 256; j++)
            {
                result[j] = (int)(a * (j - minValue));
            }
            return result;
        }

        private void button3_Click(object sender, EventArgs e)
        {
            //tablice LUT dla skladowych
            int szer = pictureBox1.Image.Width;
            int wys = pictureBox1.Image.Height;
            int[] LUTred = calcLUTs(red);
            int[] LUTgreen = calcLUTs(green);
            int[] LUTblue = calcLUTs(blue);

            //przetworz obraz i oblicz nowy histogram
            red = new int[256];
            green = new int[256];
            blue = new int[256];

            Bitmap b1 = (Bitmap)pictureBox1.Image;
            Bitmap b2 = new Bitmap(b1.Width, b1.Height, PixelFormat.Format24bppRgb);


            for (int x = 0; x < szer; x++)
            {
                for (int y = 0; y < wys; y++)
                {
                    Color pixel = b1.GetPixel(x, y);
                    Color newPixel = Color.FromArgb(LUTred[pixel.R], LUTgreen[pixel.G], LUTblue[pixel.B]);
                    b2.SetPixel(x, y, newPixel);
                    red[newPixel.R]++;
                    green[newPixel.G]++;
                    blue[newPixel.B]++;
                }
            }
            pictureBox1.Image = b2;
            pictureBox1.Refresh();

            //wyswietlanie nowego histogramu
            chart1.Series["red"].Points.Clear();
            chart1.Series["green"].Points.Clear();
            chart1.Series["blue"].Points.Clear();
            for (int k = 0; k < 256; k++)
            {
                chart1.Series["red"].Points.AddXY(k, red[k]);
                chart1.Series["green"].Points.AddXY(k, green[k]);
                chart1.Series["blue"].Points.AddXY(k, blue[k]);
            }
            chart1.Invalidate();
        }
    }
}
