import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import java.io.PrintWriter;

public class Bezier {

    public static void main(String[] args) throws FileNotFoundException {

        double[][] x = new double[4][4];
        double[][] y = new double[4][4];
        double[][] z = new double[4][4];

        String sum;

        double xx, yy, zz, v;
        double roundxx, roundyy, roundzz;
        double roundSum;

        File file = new File("czajnik.txt");
        Scanner sc = new Scanner(file);

        PrintWriter write = new PrintWriter("czajnik-w.txt");
        write.println("x, y, z, w");

        while(sc.hasNextLine()) {
            for(int i = 0; i < 4; i++){
                for(int j = 0; j < 4; j++) {
                    sum = sc.next();
                    x[i][j] = Double.parseDouble(sum);

                    sum = sc.next();
                    y[i][j] = Double.parseDouble(sum);

                    sum = sc.next();
                    z[i][j] = Double.parseDouble(sum);
                }
            }

            for(double k = 0; k <= 1; k = k + 0.1) {
                for(double l = 0; l <= 1; l = l + 0.1) {

                    v = (1 - l) * (1 - l) * (1 - l);
                    xx = v *(x[0][0]*(1-k)*(1-k)*(1-k)+3*x[0][1]*k*(1-k)*(1-k)+3*x[0][2]*k*k*(1-k)+x[0][3]*k*k*k)+
                            (3*(1-l)*(1-l)*l)*(x[1][0]*(1-k)*(1-k)*(1-k)+3*x[1][1]*k*(1-k)*(1-k)+3*x[1][2]*k*k*(1-k)+x[1][3]*k*k*k)+
                            (3*(1-l)*l*l)*(x[2][0]*(1-k)*(1-k)*(1-k)+3*x[2][1]*k*(1-k)*(1-k)+3*x[2][2]*k*k*(1-k)+x[2][3]*k*k*k)+
                            (l*l*l)*(x[3][0]*(1-k)*(1-k)*(1-k)+3*x[3][1]*k*(1-k)*(1-k)+3*x[3][2]*k*k*(1-k)+x[3][3]*k*k*k);

                    yy = v *(y[0][0]*(1-k)*(1-k)*(1-k)+3*y[0][1]*k*(1-k)*(1-k)+3*y[0][2]*k*k*(1-k)+y[0][3]*k*k*k)+
                            (3*(1-l)*(1-l)*l)*(y[1][0]*(1-k)*(1-k)*(1-k)+3*y[1][1]*k*(1-k)*(1-k)+3*y[1][2]*k*k*(1-k)+y[1][3]*k*k*k)+
                            (3*(1-l)*l*l)*(y[2][0]*(1-k)*(1-k)*(1-k)+3*y[2][1]*k*(1-k)*(1-k)+3*y[2][2]*k*k*(1-k)+y[2][3]*k*k*k)+
                            (l*l*l)*(y[3][0]*(1-k)*(1-k)*(1-k)+3*y[3][1]*k*(1-k)*(1-k)+3*y[3][2]*k*k*(1-k)+y[3][3]*k*k*k);

                    zz = v *(z[0][0]*(1-k)*(1-k)*(1-k)+3*z[0][1]*k*(1-k)*(1-k)+3*z[0][2]*k*k*(1-k)+z[0][3]*k*k*k)+
                            (3*(1-l)*(1-l)*l)*(z[1][0]*(1-k)*(1-k)*(1-k)+3*z[1][1]*k*(1-k)*(1-k)+3*z[1][2]*k*k*(1-k)+z[1][3]*k*k*k)+
                            (3*(1-l)*l*l)*(z[2][0]*(1-k)*(1-k)*(1-k)+3*z[2][1]*k*(1-k)*(1-k)+3*z[2][2]*k*k*(1-k)+z[2][3]*k*k*k)+
                            (l*l*l)*(z[3][0]*(1-k)*(1-k)*(1-k)+3*z[3][1]*k*(1-k)*(1-k)+3*z[3][2]*k*k*(1-k)+z[3][3]*k*k*k);

                    roundxx = Math.round(xx * 100.0) / 100.0;
                    roundyy = Math.round(yy * 100.0) / 100.0;
                    roundzz = Math.round(zz * 100.0) / 100.0;
                    roundSum = Math.round((roundxx + roundyy + roundzz) * 100.0) / 100.0;
                    write.println(roundxx + ", " + roundyy + ", " + roundzz + ", " + roundSum);
                }
            }
        }
        write.close();
    }
}
